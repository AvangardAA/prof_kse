write_file: (content: std::string) -> void = {
    file_o: std::ofstream = ("./local_files/users.txt");
    file_o << content;
    file_o.close();
}

save_user: (name: std::string) -> int = {
    file: std::ifstream = ("./local_files/users.txt");
    if (!file.is_open()) 
    { 
        write_file(name + ",");
        return 0;
    }
    
    users_line: std::string = ();
    std::getline(file, users_line);
    file.close();

    users_line += name + ",";
    write_file(users_line);

    return 0;
}

load_users: () -> std::string = {
    users: std::string = ();
    file: std::ifstream = ("./local_files/users.txt");
    if (!file.is_open()) { return users; }
    
    file >> users;
    file.close();

    return users;
}

main: (args) -> int = {
    if (args.argc < 2 || args.argc > 3)
    {
        std::cout << "Unsupported number of args" << std::endl;
        return 1;
    }

    option: std::string = ();
    if (args.argc == 3)
    {
        option = std::string(args.argv[2]);
        if (option != "delete")
        {
            std::cout << "Unsupported second argument. Support only: 'delete'." << std::endl;
            return 1;
        }
    }

    users := load_users();
    name: std::string = args.argv[1];

    if (name == "bread" && option != "")
    {
        write_file("");
        std::cout << "Successfully deleted all users." << std::endl;
        return 0;
    }

    delimiter: std::string_view = (",");
    logins := std::ranges::views::split(users, delimiter);
    occurences: int = 0;

    for logins do (delimited_part)
    {
        uname := std::string(delimited_part.begin(), delimited_part.end()); 
        if (uname == name) {occurences += 1;}
    }

    if (occurences == 0 && option != "") 
    {
        std::cout << "Nothing to delete, user not found." << std::endl; 
        return 0;
    }

    if (occurences == 0)
    {
        std::cout << "Welcome, " << name << "!" << std::endl;
        _ : int = save_user(name);
        return 0;
    }
    
    if (option != "")
    {
        new_users: std::string = ();
        for logins do (delimited_part)
        {
            uname := std::string(delimited_part.begin(), delimited_part.end()); 
            if (uname != name) {new_users += uname + ",";}
        }

        write_file(new_users);
        std::cout << "Successfully deleted user." << std::endl;
        return 0;
    }

    std::cout << "Hello again(x{" << occurences + 1 << "}), " << name << "!" << std::endl;
    _ : int = save_user(name);

    return 0;
}